<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rocketMQ on Joe</title>
    <link>https://holicc.github.io/tags/rocketmq/</link>
    <description>Recent content in rocketMQ on Joe</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 12 Jul 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://holicc.github.io/tags/rocketmq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust Concurrency</title>
      <link>https://holicc.github.io/2020/08/rust-concurrency/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/08/rust-concurrency/</guid>
      <description>Rust Concurrency Rust中的线程（Thread）使用的是1:1 model而不是像Golang中的goroutine使用的是M:N model； 因为Rust</description>
    </item>
    
    <item>
      <title>Rust Features</title>
      <link>https://holicc.github.io/2020/08/rust-features/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/08/rust-features/</guid>
      <description>Rust Unsafe 使用unsafe的五种特性： Dereference a raw pointer Call an unsafe function or method Access or modify a mutable static variable Implement an unsafe trait Access fields of unions Dereferencing a Raw Pointer 定义 raw pointer fn main() { let mut num = 5; let r1 = &amp;amp;num as *const i32; let r2 = &amp;amp;mut num as</description>
    </item>
    
    <item>
      <title>Powershell Notes</title>
      <link>https://holicc.github.io/2020/08/powershell-notes/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/08/powershell-notes/</guid>
      <description>查看文件（类似cat的功能） type $file 创建文件： New-Item [path] 使用记事本打开文件 Start-Process notepad $file 打开文件夹 ii . 或者 Invoke-Item .</description>
    </item>
    
    <item>
      <title>Rust Smart Pointer</title>
      <link>https://holicc.github.io/2020/08/rust-smart-pointer/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/08/rust-smart-pointer/</guid>
      <description>Rust Smart Pointer (智能指针) 普通指针（Reference）: &amp;amp; 使用这个定义的，只是指向了对应的内存地址，并没有其他的功能； 智能指针（Smart Poin</description>
    </item>
    
    <item>
      <title>Rust Testing</title>
      <link>https://holicc.github.io/2020/07/rust-testing/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-testing/</guid>
      <description>Rust单元测试 在Rust中使用测试，相当于在Java中使用@Test注解一样 #[cfg(test)] mod tests { #[test] fn it_works() { assert_eq!(2 + 2, 4); } } 其中#[test]就相当于一个注解</description>
    </item>
    
    <item>
      <title>Rust Error</title>
      <link>https://holicc.github.io/2020/07/rust-error/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-error/</guid>
      <description>Rust中的错误处理 Rust中没有Exception这个概念，而是把错误分为了两种，一种是可恢复的错误，一种是不可恢复的错误 对于可恢复的错误</description>
    </item>
    
    <item>
      <title>Rust Collections</title>
      <link>https://holicc.github.io/2020/07/rust-collections/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-collections/</guid>
      <description>Rust中的集合类型 Rust的标准库中提供了常用的集合类型：Vect(相当于Java中的List)，Map(相当于Java中的Map)，在使</description>
    </item>
    
    <item>
      <title>Rust Function</title>
      <link>https://holicc.github.io/2020/07/rocketmq-overstock/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rocketmq-overstock/</guid>
      <description>RocketMQ服务部署情况介绍 由于项目对消息的可靠性要求比较高所以采用的是SYNC_MASTER+SLAVE的部署方式, 并且使用了ASYN</description>
    </item>
    
    <item>
      <title>Rust Packages Management</title>
      <link>https://holicc.github.io/2020/07/rust-packages-management/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-packages-management/</guid>
      <description>Rust Packages Crates and Modules 每个新出的编程语言都有一套对应的包管理工具，Rust也不列外，Rust使用的是cargo作为其包管理工具； crate是一个单一的库</description>
    </item>
    
    <item>
      <title>Rust Enums And Patter Match</title>
      <link>https://holicc.github.io/2020/07/rust-enums-and-patter-match/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-enums-and-patter-match/</guid>
      <description>Rust中的枚举 enum枚举类型，一种熟悉的数据结构，在Java中也有对应的类型，就不赘述了. fn main() { enum IpAddrKind { V4, V6, } struct IpAddr { kind: IpAddrKind, address: String, } let home = IpAddr { kind:</description>
    </item>
    
    <item>
      <title>Rust Struct</title>
      <link>https://holicc.github.io/2020/07/rust-struct/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-struct/</guid>
      <description>通过使用关键struct可以定义一个类，呸，是定义一个结构体。 struct User { username: String, email: String, sign_in_count: u64, active: bool, } fn main() { let user1 = User { email: String::from(&amp;quot;someone@example.com&amp;quot;), username: String::from(&amp;quot;someusername123&amp;quot;), active: true, sign_in_count: 1, }; } struct与Ja</description>
    </item>
    
    <item>
      <title>Rust Reference And Borrowing</title>
      <link>https://holicc.github.io/2020/07/rust-references-and-borrowing/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-references-and-borrowing/</guid>
      <description>Rust中的引用(Reference)与借用(Borrowing) 在上一节的所有权系统的最后，官方抛出了一个问题，就是在函数使用的时候，如果</description>
    </item>
    
    <item>
      <title>Rust Function</title>
      <link>https://holicc.github.io/2020/07/rust-ownership/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-ownership/</guid>
      <description>Rust中的所有权系统(Ownership) 目前大部分的编程语言管理内存都是使用的：1.自动管理(垃圾回收机制，像Java) 2.手动编码控制</description>
    </item>
    
    <item>
      <title>Rust Data Types</title>
      <link>https://holicc.github.io/2020/07/rust-data-types/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-data-types/</guid>
      <description>Rust中的数据类型 Rust是一门静态类型的语言(跟Java一样)，每一个值都有其对应的数据类型(Every value in Rust is of a certain data type) Number Types Rust作</description>
    </item>
    
    <item>
      <title>Rust Function</title>
      <link>https://holicc.github.io/2020/07/rust-function/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-function/</guid>
      <description>Rust中的函数 Rust是支持函数编程的，不像Java完全是使用面向对象的编程语言，虽然可以使用Function等，但是还是有些差距的。 Ru</description>
    </item>
    
    <item>
      <title>Rust Variables</title>
      <link>https://holicc.github.io/2020/07/rust-variable/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rust-variable/</guid>
      <description>Rust中的变量与常量的定义 Rust中定义变量使用的关键字是 let 关键字，该关键字定义的变量是不可变的;想要定义一个可变的变量需要再使用一个关键</description>
    </item>
    
    <item>
      <title>Install Rust On Win10</title>
      <link>https://holicc.github.io/2020/07/install-rust-win10/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/install-rust-win10/</guid>
      <description>安装Rust 直接到Rust官方网站 找到适合自己系统的安装包exe文件下载进行安装就行了 官方提供win32位和64位的安装版本，不过一般都是6</description>
    </item>
    
    <item>
      <title>MySQL 索引</title>
      <link>https://holicc.github.io/2020/03/about-mysql-index/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/03/about-mysql-index/</guid>
      <description>索引是什么 索引（在MySQL中也称为“键（key）”），用于存储引擎快速找到记录的一种数据结构。这是索引的基础功能。 索引可以包含一个列或多个</description>
    </item>
    
    <item>
      <title>About TCP Protocol</title>
      <link>https://holicc.github.io/2020/03/about-tcp-protocol/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/03/about-tcp-protocol/</guid>
      <description>TCP是什么 ? 传输控制协议（TCP）是互联网协议组中重要的组成部分之一。TCP的实现之初是为了补充互联网协议（IP）。因此，这一对组合经常被</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://holicc.github.io/about/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/about/</guid>
      <description>Java、Rust、Golang</description>
    </item>
    
  </channel>
</rss>
