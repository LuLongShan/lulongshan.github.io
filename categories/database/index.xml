<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on Joe</title>
    <link>https://holicc.github.io/categories/database/</link>
    <description>Recent content in database on Joe</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 26 Aug 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://holicc.github.io/categories/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Common Principles</title>
      <link>https://holicc.github.io/2020/10/principles/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/10/principles/</guid>
      <description>Contents Vertical scaling Horizontal scaling Caching Load balancing Database replication Database partitioning CAP theorem Vertical scaling Vertical scaling means add more new resources in the existing system to meet the expectation. In other words that you scale by adding more power (CPU, RAM) to an existing machine. Good example of vertical scaling is The cloud version of MySQL Horizontal scaling Horizontal scaling means that you scale by adding more machines.</description>
    </item>
    
    <item>
      <title>HTTP Range Download</title>
      <link>https://holicc.github.io/2020/09/http-range/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/09/http-range/</guid>
      <description>Intro Recently,I&#39;m interested in HTTP-Range-Download. So i decided build a toy with Rust Reference Go实现 HTTP 请求方法</description>
    </item>
    
    <item>
      <title>Logout GET or POST</title>
      <link>https://holicc.github.io/2020/09/about-logout-method/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/09/about-logout-method/</guid>
      <description>[Copy]Logout: GET or POST This question is not about when to use GET or POST in general; it is about which is the recommended one for handling logging out of a web application. I have found plenty of information on the differences between GET and POST in the general sense, but I did not find a definite answer for this particular scenario. As a pragmatist, I&#39;m inclined to use GET,</description>
    </item>
    
    <item>
      <title>Go Code Style</title>
      <link>https://holicc.github.io/2020/09/go-code-snippet/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/09/go-code-snippet/</guid>
      <description>goroutine limiter var count int32 resp := make([]*CommandResponse, len(req.Images)) // waitForAllJob := make(chan struct{}, cfg.Server.MaxParallelNum) defer close(waitForAllJob) // for i := 0; i &amp;lt; len(req.Images); i++ { waitForAllJob &amp;lt;- struct{}{} go func(index int, img *model.Image) { response := process(img) resp[index] = response &amp;lt;-waitForAllJob atomic.AddInt32(&amp;amp;count, 1) }(i, &amp;amp;req.Images[i]) } // for int32(len(req.Images)) != count { }  </description>
    </item>
    
    <item>
      <title>Postgres VS MySQL</title>
      <link>https://holicc.github.io/2020/08/postgres/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/08/postgres/</guid>
      <description>History POSTGRES的实现始于 1986 年，现在被称为PostgreSQL的对象-关系型数据库管理系统是从加州大学伯克利分校写的POSTGRES软件包</description>
    </item>
    
    <item>
      <title>Go Code Style</title>
      <link>https://holicc.github.io/2020/08/go-code-style/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/08/go-code-style/</guid>
      <description>Receiver Type Choosing whether to use a value or pointer receiver on methods can be difficult, especially to new Go programmers. If in doubt, use a pointer, but there are times when a value receiver makes sense, usually for reasons of efficiency, such as for small unchanging structs or values of basic type. Some useful guidelines:
 If the receiver is a map, func or chan, don&#39;t use a pointer to them.</description>
    </item>
    
    <item>
      <title>Powershell Notes</title>
      <link>https://holicc.github.io/2020/08/powershell-notes/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/08/powershell-notes/</guid>
      <description>Unix时间戳： Get-Date -UFormat %s 查看文件（类似cat的功能） type $file 创建文件： New-Item [path] 使用记事本打开文件 Start-Process notepad $file 打开文件夹 ii . 或者 Invoke-Item . 函数别名 Set-Alias 如何配置Powe</description>
    </item>
    
    <item>
      <title>RocketMQ</title>
      <link>https://holicc.github.io/2020/07/rocketmq-overstock/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/07/rocketmq-overstock/</guid>
      <description>RocketMQ服务部署情况介绍 由于项目对消息的可靠性要求比较高所以采用的是SYNC_MASTER+SLAVE的部署方式, 并且使用了ASYN</description>
    </item>
    
    <item>
      <title>MySQL 索引</title>
      <link>https://holicc.github.io/2020/03/about-mysql-index/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/03/about-mysql-index/</guid>
      <description>索引是什么 索引（在MySQL中也称为“键（key）”），用于存储引擎快速找到记录的一种数据结构。这是索引的基础功能。 索引可以包含一个列或多个</description>
    </item>
    
    <item>
      <title>About TCP Protocol</title>
      <link>https://holicc.github.io/2020/03/about-tcp-protocol/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/2020/03/about-tcp-protocol/</guid>
      <description>TCP是什么 ? 传输控制协议（TCP）是互联网协议组中重要的组成部分之一。TCP的实现之初是为了补充互联网协议（IP）。因此，这一对组合经常被</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://holicc.github.io/about/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://holicc.github.io/about/</guid>
      <description>Java、Rust、Golang</description>
    </item>
    
  </channel>
</rss>
