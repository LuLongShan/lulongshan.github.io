<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>system-design on joe</title><link>https://holicc.github.io/categories/system-design/</link><description>Recent content in system-design on joe</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 10 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://holicc.github.io/categories/system-design/index.xml" rel="self" type="application/rss+xml"/><item><title>Common Principles</title><link>https://holicc.github.io/post/system-design/principles/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://holicc.github.io/post/system-design/principles/</guid><description>Contents Vertical scaling Horizontal scaling Caching Load balancing Database replication Database partitioning CAP theorem Domain name system Content delivery network Vertical scaling Vertical scaling means add more new resources in the existing system to meet the expectation. In other words that you scale by adding more power (CPU, RAM) to an existing machine. Good example of vertical scaling is The cloud version of MySQL Horizontal scaling Horizontal scaling means that</description></item></channel></rss>